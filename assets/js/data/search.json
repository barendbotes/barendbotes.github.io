[ { "title": "Zabbix and Grafana Install", "url": "/posts/zabbix-and-grafana-install/", "categories": "documentation, container, docker, linux", "tags": "zabbix, docker-compose, ubuntu, grafana, postgresql", "date": "2023-10-26 17:15:00 +0200", "snippet": " + Installation InstructionsThe repoFirst thing is first, clone the repo.I have saved all my docker files and templates in GithubTo use my templates, you can clone my repo as follows...", "content": " + Installation InstructionsThe repoFirst thing is first, clone the repo.I have saved all my docker files and templates in GithubTo use my templates, you can clone my repo as followscd ~git clone https://github.com/barendbotes/docker-templates.gitChange directory into the repocd docker-templates All references to files will be from this directory.PostgreSQL and pgAdminFirst you need to generate a complex password for your postgres and pgadmin user - run the command twice to get a different string for the second password, the below command will generate a 32 character string without special characters.For the postgres usercat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 64 | head -n 1For the pgadmin usercat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 32 | head -n 1Copy the string and replace &lt;super-secure-password-1&gt; and &lt;super-secure-password-2&gt; with the two generated strings in postgres/.env with the generated string.POSTGRES_PASSWORD=jNbQYKSeVKnIAIO7aKeFRElZQWfZxkM1831BRAIqdnEQ382H7WVCDeS1RFwQayvQ # &lt;super-secure-password-1&gt;PGADMIN_DEFAULT_EMAIL=user@domain.comPGADMIN_DEFAULT_PASSWORD=Peajezj8rEOirY7T1k7ILxj3xhf8i7Sw # &lt;super-secure-password-2&gt;TRAEFIK_SERVICE=pgadminTRAEFIK_PORT=80TRAEFIK_URL=pgadmin.domain.comTRAEFIK_SCHEME=httpOnce completed, you can then run the container.docker-compose -f postgres/docker-compose.yml up -dConfirm it is up by runningdocker psZabbixBy this time, you would have created a database and a user in PostgreSQL by using pgAdmin - you can further lock it down by editing the pg_hba.conf file with the relevant users and ip addresses created.Edit the zabbix/.env file with your own entries.VERSION=alpine-6.4-latestDB_SERVER_HOST=docker.postgresql.localPOSTGRES_DB=zabbix-dbPOSTGRES_USER=zabbix-userPOSTGRES_PASSWORD=&lt;super-secure-password-1&gt;ZBX_SERVER_HOST=zabbix-server-pgsqlTRAEFIK_SCHEME=zabbixTRAEFIK_SERVICE=httpTRAEFIK_PORT=8080TRAEFIK_URL=zabbix.domain.comOnce done, you can create the containerdocker-compose -f zabbix/docker-compose.yml up -d GrafanaEdit the grafana/.env file with your own entries. Ignore all the hashed out entries, those will be discussed at a later stage. Change the GF_SERVER_DOMAIN and the TRAEFIK_URL to your requirement.TZ=Africa/JohannesburgGF_INSTALL_PLUGINS=alexanderzobnin-zabbix-appGF_SERVER_DOMAIN=${TRAEFIK_URL}GF_SERVER_ROOT_URL=https://${TRAEFIK_URL}GF_PLUGIN_ALLOW_LOCAL_MODE=trueGF_PANELS_DISABLE_SANITIZE_HTML=trueGF_SECURITY_ALLOW_EMBEDDING=trueGF_DEFAULT_INSTANCE_NAME=grafana# GF_AUTH_GENERIC_OAUTH_ENABLED=true# GF_AUTH_GENERIC_OAUTH_NAME=Authentik# GF_AUTH_GENERIC_OAUTH_CLIENT_ID=&lt;oauth-client-id&gt;# GF_AUTH_GENERIC_OAUTH_CLIENT_SECRET=&lt;oauth-client-secret&gt;# GF_AUTH_GENERIC_OAUTH_SCOPES=openid profile email groups# GF_AUTH_GENERIC_OAUTH_EMPTY_SCOPES=false# GF_AUTH_GENERIC_OAUTH_AUTH_URL=https://admin.auth.domain.com/application/o/authorize/# GF_AUTH_GENERIC_OAUTH_TOKEN_URL=https://admin.auth.domain.com/application/o/token/# GF_AUTH_GENERIC_OAUTH_API_URL=https://admin.auth.domain.com/application/o/userinfo/# GF_AUTH_SIGNOUT_REDIRECT_URL=https://admin.auth.domain.com/application/o/grafana/end-session/# GF_AUTH_GENERIC_OAUTH_LOGIN_ATTRIBUTE_PATH=email# GF_AUTH_GENERIC_OAUTH_GROUPS_ATTRIBUTE_PATH=groups# GF_AUTH_GENERIC_OAUTH_NAME_ATTRIBUTE_PATH=name# GF_AUTH_GENERIC_OAUTH_USE_PKCE=true# GF_AUTH_GENERIC_OAUTH_ALLOW_ASSIGN_GRAFANA_ADMIN=true# GF_AUTH_GENERIC_OAUTH_ROLE_ATTRIBUTE_PATH=\"contains(groups[*], 'Administrators') &amp;&amp; 'GrafanaAdmin'\"TRAEFIK_SERVICE=grafanaTRAEFIK_COOKIE=grafana_lvlTRAEFIK_PORT=3000TRAEFIK_URL=grafana.domain.comTRAEFIK_SCHEME=httpOnce done, you can create the containerdocker-compose -f grafana/docker-compose.yml up -dDocumentationLocal Aliases specified for containers and services Alias Docker Network Service docker.portainer.local traefik_proxy Portainer docker.traefik.local traefik_proxy Traefik Proxy docker.crowdsec.local traefik_proxy Crowdsec API docker.bouncer.local traefik_proxy Crowdsec Bouncer ForwardAuth API docker.whoami.local traefik_proxy Who Am I Web Service docker.postgres.local database_network PostgreSQL Database " }, { "title": "Docker and Portainer Install", "url": "/posts/docker-and-portainer-install/", "categories": "documentation, container, docker, linux, ips, security", "tags": "portainer, docker-compose, ubuntu, traefik, crowdsec", "date": "2023-10-26 10:25:00 +0200", "snippet": " + Installation InstructionsThe repoFirst thing is first, clone the repo.I have saved all my docker files and templates in GithubTo use my templates, you can clone my repo as follows...", "content": " + Installation InstructionsThe repoFirst thing is first, clone the repo.I have saved all my docker files and templates in GithubTo use my templates, you can clone my repo as followscd ~git clone https://github.com/barendbotes/docker-templates.gitChange directory into the repocd docker-templates All references to files will be from this directory.Docker and Docker-composeI prefer to use the built in repositories for Docker as Ubuntu does tend to keep them up to date and I have never had any issue running it.sudo apt install docker docker-compose -yNow add your user account to the Docker groupsudo usermod -aG docker $USER Remember to log out and back into your server for the group permissions to take place.Since we are installing this on a single host, I am also going to modify the default network size that docker uses. Create the following file:sudo touch /etc/docker/daemon.jsonEdit the file and add the followingsudo systemctl stop dockersudo nano /etc/docker/daemon.json{\t\"live-restore\": true,\t\"bip\": \"172.31.0.1/24\",\t\"default-address-pools\": [\t\t{\t\t\t\"base\": \"172.31.0.0/16\",\t\t\t\"size\": 24\t\t}\t]}Save the file and restart dockersudo systemctl start dockerFor future reference, we can create the required docker networks now.docker network create -d bridge traefik_proxy --attachable --internaldocker network create -d bridge database_network --attachable --internaldocker network create -d bridge crowdsec_network --attachable --internal Because we have created a network that is only internal any containers or stacks that we create with this network would need an additional network for public access - but that will be done within each docker-compose.yml file going forward.PortainerSince most of the configuration is in the github repo, all you have to do is modify the portainer/.env file with your values, but that does not need to be done right now as we have not installed traefik or crowdsec yet.This is what the portainer/.env file looks like, we will come back to this laterTRAEFIK_URL=portainer.domain.comTRAEFIK_PORT=9443TRAEFIK_SCHEME=httpsTRAEFIK_SERVICE=portainerBelow I will talk you through the docker-compose.yml configuration below and what it means. This file is already in the repository, so you donâ€™t need to modify anything.version: '3.5'networks: traefik_proxy: # &lt;--- Referencing the docker network created earlier within the docker stack name: traefik_proxy external: true # &lt;--- Specifying that it was created outside of the current docker stack (this docker-compose.yml file) default: # &lt;--- Creating a new network for internet access for the containersvolumes: portainer_data: # &lt;--- Creating a docker volume for Portainer's persistent dataservices: portainer: image: portainer/portainer-ce:latest container_name: portainer # &lt;--- Just specifying names so that get some good habits going. hostname: portainer # &lt;--- An identifiable name which gets referenced within notification services etc. restart: always networks: default: # &lt;--- Attching the locally created network to the container traefik_proxy: # &lt;--- Attching the externally created network to the container. aliases: - docker.portainer.local # &lt;--- Just creating an alias in case we want to refer to it via the \"traefik_proxy\" network. labels: # &lt;--- Labels wont break anything being there, it helps with automated tasks and enrollment into services. - \"com.centurylinklabs.watchtower.enable=true\" # &lt;--- Future use for automatic container updates - \"traefik.enable=true\" # &lt;--- Enables traefik integration - \"traefik.docker.network=traefik_proxy\" # &lt;--- Specifying what network to use - \"traefik.http.routers.${TRAEFIK_SERVICE}.entrypoints=https\" # &lt;--- Specifying the https entry point within the traefik config - \"traefik.http.routers.${TRAEFIK_SERVICE}.rule=Host(`${TRAEFIK_URL}`)\" # &lt;--- Rule to proxy incomming request \"IF you use this DOMAIN, then route to THIS service\" - \"traefik.http.services.${TRAEFIK_SERVICE}-service.loadbalancer.passhostheader=true\" # &lt;--- Passing the URL through to the web application (Its on by default) - \"traefik.http.services.${TRAEFIK_SERVICE}-service.loadbalancer.server.port=${TRAEFIK_PORT}\" # &lt;--- Specifying the port that the internal service uses, portainer in this case uses 9443 - \"traefik.http.services.${TRAEFIK_SERVICE}-service.loadbalancer.server.scheme=${TRAEFIK_SCHEME}\" # &lt;--- The scheme used to connect to the above port, 9443 by portainer uses https scheme - \"traefik.http.routers.${TRAEFIK_SERVICE}.tls=true\" # &lt;--- Specifying that we want to use TLS for certificate services - \"traefik.http.routers.${TRAEFIK_SERVICE}.middlewares=public-chain@file\" # &lt;--- The middleware that we want to use for this service (explained more in traefik setup) ports: - \"9443:9443\" # &lt;--- The ports used by portainer exposed on the VM interfaces - \"8000:8000\" # &lt;--- The ports used by portainer exposed on the VM interfaces volumes: - portainer_data:/data # &lt;--- Here we are mapping the docker volume portainer_data to the internal path of /data inside the container - /var/run/docker.sock:/var/run/docker.sock # &lt;--- Used for portainer to controll dockerHaving gone through everything, you can now create the Portainer applicationdocker-compose -f portainer/docker-compose.yml up -dTo see if it is up and running, you can run the below:docker psTraefikWe need to create and then modify the rights to traefik/data/acme.json, this is needed as traefik will fail to create and store certificates as your basic access rights are too opentouch traefik/data/acme.jsonchmod 600 traefik/data/acme.jsonCreate the cloudflare API key file.mkdir traefik/.secretCopy your API key from Cloudflare into the cloudflare_token file.touch traefik/.secret/cloudflare_tokenecho \"api-super-secret-key\" &gt;&gt; traefik/.secret/cloudflare_tokenTo generate a username and password hash, use the below commandecho $(htpasswd -nb \"&lt;USER&gt;\" \"&lt;PASSWORD&gt;\") | sed -e s/\\\\$/\\\\$\\\\$/g You might need to install apache2-utils for the above to work: sudo apt install apache2-utils -yNext you will need to modify the traefik/.env file with your own requirements.TRAEFIK_DASH_URL=traefik-dashboard.domain.comTRAEFIK_HASH=&lt;user-password-hash&gt; # echo $(htpasswd -nb \"&lt;USER&gt;\" \"&lt;PASSWORD&gt;\") | sed -e s/\\\\$/\\\\$\\\\$/gDOMAIN_0=domain.comDOMAIN_1=domain.orgThere are other config files that you can modify to your liking, traefik/data/config.yml - this is a dynamic config file for traefik. You can find out more about advanced configuration in the traefik docs site.You need to modify the traefik system file with your own required config. If you want to see if your DNS provider is support, you can find that here. Otherwise, you would need to configure a different challenge to get Let's Encrypt certificates.# ...certificatesResolvers: cloudflare: acme: email: user@domain.com # &lt;-- Enter in your Cloudflare email address storage: acme.json dnsChallenge: provider: cloudflare resolvers: - \"1.1.1.1:53\" - \"1.0.0.1:53\"# ...We are now ready to deploy traefikdocker-compose -f traefik/docker-compose.yml up -dSee if the contianer is updocker psCrowdsecYou can immediately spin up the crowdsec containerdocker-compose up -d -f crowdsec/docker-compose.ymlConfirm that it is runningdocker psYou should see6ed2572f5c crowdsecurity/crowdsec:latest \"/bin/sh -c '/bin/baâ€¦\" About an hour ago Up 28 minutes crowdsec_crowdsec_1Exec into the container and add the traefik-bouncerdocker exec crowdsec_crowdsec_1 cscli bouncers add traefik-bouncerYou should get traefik-bouncer api keyApi key for 'traefik-bouncer': 882882ac8acdf60dacc008dd3de68cf0Please keep this key since you will not be able to retrieve it!Also add the traefik logs parser:Exec into the container and add the traefik parserdocker exec crowdsec_crowdsec_1 cscli parsers install crowdsecurity/traefik-logsWe have to add this to our bouncer and create the container, for this you need to modify the crowdsec/docker-compose.yml file and uncomment the traefik-bouncer service bouncer-traefik: image: docker.io/fbonalair/traefik-crowdsec-bouncer:latest environment: CROWDSEC_BOUNCER_API_KEY: 882882ac8acdf60dacc008dd3de68cf0 # Insert your generated key CROWDSEC_AGENT_HOST: crowdsec:8080 CROWDSEC_BOUNCER_LOG_LEVEL: 0 GIN_MODE: release networks: default: crowdsec_network: aliases: - docker.bouncer.local restart: unless-stoppedOnce everything has been updated and modified, you can now upgrade the containers with the new configdocker-compose -f traefik/docker-compose.yml up -d --force-recreatedocker-compose -f crowdsec/docker-compose.yml up -d --force-recreateTo confirm that crowdsec and traefik is working together, we will do a quick testFirst you modify the whoami/.env file with your required detailsTRAEFIK_URL=whoami.domain.comTRAEFIK_PORT=80TRAEFIK_SCHEME=httpTRAEFIK_SERVICE=whoamiThen you deploy the containerdocker-compose -f whoami/docker-compose.yml up -dNow navigate to https://whoami.domain.com and confirm that you have a valid certificate from Let's Encrypt Remember to point your whoami.domain.com DNS to your docker instanceTest the crowdsec bouncer by adding your IP to the ban listdocker exec crowdsec_crowdsec_1 cscli decisions add --ip my-ip-addressConfirm that you received a â€˜Forbiddenâ€™ message when navigating to https://whoami.domain.comRemove your bandocker exec crowdsec_crowdsec_1 cscli decisions delete --ip my-ip-address If you receiving and error when trying to exec into the container, remember to check the container name by running docker ps and looking for your containerIf all went well, you have just installed a reverse proxy with automatic certificate renewals and a collaborative IPS(Intrusion Prevention System) solutionDocumentationLocal Aliases specified for containers and services Alias Docker Network Service docker.portainer.local traefik_proxy Portainer docker.traefik.local traefik_proxy Traefik Proxy docker.crowdsec.local crowdsec_network Crowdsec API docker.bouncer.local crowdsec_network Crowdsec Bouncer ForwardAuth API docker.whoami.local traefik_proxy Who Am I Web Service " } ]
